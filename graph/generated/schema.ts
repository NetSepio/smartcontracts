// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Review extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("category", Value.fromString(""));
    this.set("domainAddress", Value.fromString(""));
    this.set("siteURL", Value.fromString(""));
    this.set("siteType", Value.fromString(""));
    this.set("siteTag", Value.fromString(""));
    this.set("siteSafety", Value.fromString(""));
    this.set("metaDataUri", Value.fromString(""));
    this.set("reviewBy", Value.fromString(""));
    this.set("deleted", Value.fromBoolean(false));
    this.set("infoHash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Review entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Review entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Review", id.toString(), this);
    }
  }

  static load(id: string): Review | null {
    return changetype<Review | null>(store.get("Review", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value!.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get domainAddress(): string {
    let value = this.get("domainAddress");
    return value!.toString();
  }

  set domainAddress(value: string) {
    this.set("domainAddress", Value.fromString(value));
  }

  get siteURL(): string {
    let value = this.get("siteURL");
    return value!.toString();
  }

  set siteURL(value: string) {
    this.set("siteURL", Value.fromString(value));
  }

  get siteType(): string {
    let value = this.get("siteType");
    return value!.toString();
  }

  set siteType(value: string) {
    this.set("siteType", Value.fromString(value));
  }

  get siteTag(): string {
    let value = this.get("siteTag");
    return value!.toString();
  }

  set siteTag(value: string) {
    this.set("siteTag", Value.fromString(value));
  }

  get siteSafety(): string {
    let value = this.get("siteSafety");
    return value!.toString();
  }

  set siteSafety(value: string) {
    this.set("siteSafety", Value.fromString(value));
  }

  get metaDataUri(): string {
    let value = this.get("metaDataUri");
    return value!.toString();
  }

  set metaDataUri(value: string) {
    this.set("metaDataUri", Value.fromString(value));
  }

  get reviewBy(): string {
    let value = this.get("reviewBy");
    return value!.toString();
  }

  set reviewBy(value: string) {
    this.set("reviewBy", Value.fromString(value));
  }

  get deleted(): boolean {
    let value = this.get("deleted");
    return value!.toBoolean();
  }

  set deleted(value: boolean) {
    this.set("deleted", Value.fromBoolean(value));
  }

  get infoHash(): string {
    let value = this.get("infoHash");
    return value!.toString();
  }

  set infoHash(value: string) {
    this.set("infoHash", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("roles", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reviews(): Array<string> {
    let value = this.get("reviews");
    return value!.toStringArray();
  }

  set reviews(value: Array<string>) {
    this.set("reviews", Value.fromStringArray(value));
  }

  get roles(): Array<string> {
    let value = this.get("roles");
    return value!.toStringArray();
  }

  set roles(value: Array<string>) {
    this.set("roles", Value.fromStringArray(value));
  }
}
